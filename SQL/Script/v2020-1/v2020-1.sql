CREATE TABLE AUX_MOTIVO_APLICACAO(ID INTEGER NOT NULL,
MOTIVO VARCHAR(50),
STATUS INTEGER DEFAULT 1 NOT NULL,
DATAREG TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
ID_USUARIO INTEGER NOT NULL);


CREATE TABLE COMPRADOR(ID INTEGER NOT NULL,
NOME VARCHAR(100) NOT NULL,
TELEFONE VARCHAR(20),
EMAIL VARCHAR(100),
ID_USUARIO INTEGER NOT NULL,
STATUS INTEGER DEFAULT 1 NOT NULL);


CREATE TABLE KEYFIELD(ID INTEGER NOT NULL,
"KEY" VARCHAR(30),
DATAREG TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
STATUS INTEGER DEFAULT 1 NOT NULL);


CREATE TABLE VERSION(ID INTEGER NOT NULL,
NUMERO INTEGER NOT NULL,
DATAREG TIMESTAMP DEFAULT CURRENT_TIMESTAMP);



ALTER TABLE ANIMAL_SANIDADE ADD ORIGEM_DADOS INTEGER DEFAULT 0;

ALTER TABLE COCHO ADD METRAGEM DECIMAL(15,2);

ALTER TABLE COCHO ADD CREEPFEED INTEGER DEFAULT 0;

ALTER TABLE CONFIG_MANEJO ADD ATUALIZA_DT_ENTRADA INTEGER DEFAULT 0;

ALTER TABLE CONFIG_MANEJO ADD ATUALIZA_PESO_ENTRADA INTEGER DEFAULT 0;

ALTER TABLE GTA ADD VALOR_FRETE_CAB DECIMAL(15,2) DEFAULT 0;

ALTER TABLE GTA ADD VALOR_COMISSAO_CAB DECIMAL(15,2) DEFAULT 0;

ALTER TABLE GTA ADD PESO_B_ORIGEM DECIMAL(15,2) DEFAULT 0;

ALTER TABLE GTA ADD PESO_B_DESTINO DECIMAL(15,2) DEFAULT 0;

ALTER TABLE GTA ADD ID_COMPRADOR INTEGER;

ALTER TABLE PLAN_NUTRI ADD ID_MINERAL INTEGER;

ALTER TABLE SUPLEMENTO_MINERAL ADD CM_COCHO_INDICADO DECIMAL(15,2);

UPDATE RDB$RELATION_FIELDS SET RDB$Collation_ID = Null
  WHERE RDB$FIELD_NAME='CODIGO' AND RDB$RELATION_NAME='CURRAIS';

ALTER TABLE RETIRO ALTER COLUMN AREA_HECTARES TYPE NUMERIC(18,2);

DROP VIEW REL_GERAL_LOTES_ATIVOS;

/* Create view: REL_GERAL_LOTES_ATIVOS */
CREATE VIEW REL_GERAL_LOTES_ATIVOS(
ANIMAL_ID,
CURRAL,
IDENT_1,
IDENT_2,
IDADE_ENTRADA,
NASCIMENTO,
RACA,
CATEGORIA,
DATA_ENT,
PESO_ENT,
DT_ULTIMO_PESO,
ULTIMO_PESO,
GTA,
DIAS,
IDADEATUAL,
DATA_SAIDA,
PESO_SAIDA,
PESOATUAL,
CUSTOFIXOACUMULADO,
CUSTOALIMENTAR,
CONSUMOTOTALCAB,
GTA_SAIDA,
PRODUTORORIGEM,
PRODUTORDESTINOSAIDA,
SEXO,
PROPRIEDADEORIGEM,
VALOR_COMPRA,
VALOR_VENDA,
GTP,
GMD,
CUSTOFIXODIA,
CUSTOALIMDIA,
CONSUMOTOTAL,
FAIXAIDADE,
CATEGORIAATUAL,
GTP_SAIDA,
GMD_SAIDA,
CUSTOTOTAL,
CUSTOTOTALMAISCOMPRA,
INGESTAO_PV)
 AS 
SELECT y.*,
(SELECT FIRST 1 NOME FROM CATEGORIAS WHERE STATUS<>-1 AND SEXO=y.Sexo AND FAIXA_ETARIA=y.FaixaIdade) CategoriaAtual,
COALESCE(CASE 
 WHEN y.PESO_SAIDA>0 THEN y.PESO_SAIDA-y.Peso_Ent
END,0) GTP_SAIDA,
COALESCE(CASE 
 WHEN y.PESO_SAIDA>0 THEN ((y.PESO_SAIDA-y.Peso_Ent)/Y.DIAS)
END,0) GMD_SAIDA,
(y.CustoFixoAcumulado+y.CustoAlimentar)CustoTotal,
(y.CustoFixoAcumulado+y.CustoAlimentar+y.VALOR_COMPRA)CustoTotalMaisCompra,
(ConsumoTotal*100)/PesoAtual INGESTAO_PV
FROM 
(SELECT X.*, 
(X.PesoAtual-X.PESO_ENT)GTP,
((X.PesoAtual-X.PESO_ENT)/X.Dias)gmd, 
(CustoFixoAcumulado/X.Dias)custofixoDia,
(CustoAlimentar/X.Dias)custoAlimDia,
(ConsumoTotalCab/X.Dias)ConsumoTotal,
case
 when x.IdadeAtual <=12                     then '00 a 12'
 when x.IdadeAtual >12 and x.IdadeAtual<=24  then '13 a 24'
 when x.IdadeAtual >24 and x.IdadeAtual<=36 then '25 a 36'
 when x.IdadeAtual >36                      then 'Mais 36'
end FaixaIdade
from
(select  
    an.id animal_id, 
    cu.codigo curral, 
    an.identificacao_1 ident_1, 
    an.identificacao_2 ident_2,
    an.IDADE_MESES idade_entrada,
    CAST(an.DATA_NASCIMENTO AS DATE) nascimento,
    r.nome raca, 
    c.nome categoria, 
    an.data_proc data_ent, 
    an.peso_entrada peso_Ent, 
    COALESCE(cast(an.data_ultimo_peso as date),CAST(an.data_proc AS date)) dt_ultimo_peso, 
    COALESCE(an.ultimo_peso,an.peso_entrada)ultimo_peso,  
    g.serie||g.uf||g.numero gta,
    datediff(DAY FROM an.data_proc to COALESCE(an.DATA_SAIDA,CURRENT_DATE))+1 dias,
    datediff(MONTH FROM an.DATA_NASCIMENTO to COALESCE(an.DATA_SAIDA,CURRENT_DATE)) idadeAtual,
    an.DATA_SAIDA,
    an.PESO_SAIDA,
    (SELECT * FROM RETORNA_PESO_MEDIO_ATUAL_IND(COALESCE(an.DATA_SAIDA,CURRENT_DATE),an.ID)) PesoAtual,
    (SELECT * FROM RETORNA_CUSTO_FIXO(cast(an.DATA_PROC AS date),an.ID)) CustoFixoAcumulado,
    coalesce((select SUM(F.valor_forn) from animal_fornecimento f where f.id_animal=AN.ID),0)CustoAlimentar,
    coalesce((select SUM(F.KG_CAB) from animal_fornecimento f where f.id_animal=AN.ID),0)ConsumoTotalCab,
    gs.serie||gs.uf||gs.numero gta_Saida,
    prt.NOME  ProdutorOrigem,
    prts.NOME ProdutorDestinoSaida,
    c.SEXO,
    pro.NOME PropriedadeOrigem,
    an.VALOR_COMPRA,
    an.VALOR_VENDA
    from animal AN 
    join raca R ON AN.id_raca=R.id 
    join categorias c on an.id_categoria=c.id 
    join currais cu on an.id_local=cu.id 
    left join gta g on g.id=an.gta_id
    left join gta gs on gs.id=an.ID_GTA_SAIDA
    LEFT JOIN PRODUTORES prt ON prt.ID=an.ID_PRODUTOR_ORIGEM
    LEFT JOIN PROPRIEDADES Pro ON pro.ID=prt.ID_PROPRIEDADE
    LEFT JOIN PRODUTORES prts ON prts.ID=an.ID_PRODUTOR_DESTINO_SAIDA
   where AN.STATUS=1)X)y
;

DROP VIEW VIEW_RESUMO_ATIVOS;

/* Create view: VIEW_RESUMO_ATIVOS */
CREATE VIEW VIEW_RESUMO_ATIVOS(
PASTO,
RACA,
CATEGORIAATUAL,
QTD_CAB,
DIAS_MEDIO,
PESO_ENT,
ARR_ENTRADA,
PESO_ATUAL,
ARR_ATUAL,
CONSUMO_ACUMULADO,
CUSTO_ALIMENTAR,
CUSTOFIXOACUMULADO,
CUSTOTOTALMAISCOMPRA,
CUSTOTOTAL,
IMS_PV,
ID_PROPRIEDADE,
CUSTO_ARR_PROD,
DATA_ENTRADA_MEDIA,
ARR_PRODUZIDA,
CUSTO_ALIMENTAR_CAB,
CUSTO_FIXO_CAB_DIA,
GTP,
GMD,
CONSUMO_CAB_DIA)
 AS 
SELECT
 Y.*,
 CASE
 WHEN (ARR_ATUAL-ARR_ENTRADA)>0 THEN
   CUSTOTOTAL/((ARR_ATUAL-ARR_ENTRADA)*QTD_CAB)
  ELSE
   '0'
 END  CUSTO_ARR_PROD,
 CURRENT_DATE-DIAS_MEDIO DATA_ENTRADA_MEDIA,
 (ARR_ATUAL-ARR_ENTRADA)ARR_PRODUZIDA,
 (CUSTO_ALIMENTAR/QTD_CAB)CUSTO_ALIMENTAR_CAB,
 (CUSTOFIXOACUMULADO/QTD_CAB) CUSTO_FIXO_CAB_DIA,
 (PESO_ATUAL-PESO_ENT) GTP,
 ((PESO_ATUAL-PESO_ENT)/DIAS_MEDIO)GMD,
 (CONSUMO_ACUMULADO/QTD_CAB) CONSUMO_CAB_DIA
FROM
(SELECT
 C.codigo PASTO,
 R.Nome RACA,
 CA.NOME CATEGORIAATUAL,
 COUNT(*) QTD_CAB,
 AVG(DATEDIFF(DAY FROM A.data_proc TO coalesce(A.data_saida,current_date))+1)DIAS_MEDIO,
 AVG(PESO_ENTRADA) PESO_ENT,
 AVG(PESO_ENTRADA/30)ARR_ENTRADA,
 AVG(PESO_ESTIMADO)PESO_ATUAL,
 AVG(PESO_ESTIMADO/30)ARR_ATUAL,
 SUM(A.consumo_acu)CONSUMO_ACUMULADO,
 SUM(A.valor_custo_alimentar)CUSTO_ALIMENTAR,
 SUM(A.valor_custo_fixo_acu)CUSTOFIXOACUMULADO,
 SUM((VALOR_CUSTO_ALIMENTAR+VALOR_CUSTO_FIXO_ACU+VALOR_COMPRA)) CUSTOTOTALMAISCOMPRA,
 SUM((VALOR_CUSTO_ALIMENTAR+VALOR_CUSTO_FIXO_ACU))CUSTOTOTAL,
 AVG(IMS_PV)IMS_PV,
 A.ID_PROPRIEDADE
FROM ANIMAL A 
JOIN CURRAIS C ON A.ID_LOCAL=C.ID
JOIN RACA R ON R.id=A.id_raca
JOIN categorias CA ON CA.ID=coalesce(A.id_categoria,A.id_categoria)
WHERE A.STATUS=1
GROUP BY C.codigo,CA.NOME,R.NOME,A.ID_PROPRIEDADE)Y
;

DROP VIEW VIEW_RESUMO_ATIVOS_GERAL;

/* Create view: VIEW_RESUMO_ATIVOS_GERAL */
CREATE VIEW VIEW_RESUMO_ATIVOS_GERAL(
PASTO,
RACA,
CATEGORIAATUAL,
QTD_CAB,
DIAS_MEDIO,
PESO_ENT,
ARR_ENTRADA,
PESO_ATUAL,
ARR_ATUAL,
CONSUMO_ACUMULADO,
CUSTO_ALIMENTAR,
CUSTOFIXOACUMULADO,
CUSTOTOTALMAISCOMPRA,
CUSTOTOTAL,
IMS_PV,
ID_PROPRIEDADE,
CUSTO_ARR_PROD,
DATA_ENTRADA_MEDIA,
ARR_PRODUZIDA,
CUSTO_ALIMENTAR_CAB,
CUSTO_FIXO_CAB_DIA,
GTP,
GMD,
CONSUMO_CAB_DIA)
 AS 
SELECT
 Y.*,
 CAST(CASE
 WHEN (ARR_ATUAL-ARR_ENTRADA)>0 THEN
   CUSTOTOTAL/((ARR_ATUAL-ARR_ENTRADA)*QTD_CAB)
  ELSE
   '0'
 END AS DECIMAL(15,2))  CUSTO_ARR_PROD,
 CURRENT_DATE-DIAS_MEDIO DATA_ENTRADA_MEDIA,
 CAST((ARR_ATUAL-ARR_ENTRADA)AS DECIMAL(15,2))ARR_PRODUZIDA,
 CAST((CUSTO_ALIMENTAR/QTD_CAB)AS DECIMAL(15,2))CUSTO_ALIMENTAR_CAB,
 CAST((CUSTOFIXOACUMULADO/QTD_CAB)AS DECIMAL(15,2))CUSTO_FIXO_CAB_DIA,
 (PESO_ATUAL-PESO_ENT) GTP,
 ((PESO_ATUAL-PESO_ENT)/DIAS_MEDIO)GMD,
 (CONSUMO_ACUMULADO/QTD_CAB) CONSUMO_CAB_DIA
FROM
(SELECT
 C.codigo PASTO,
 MAX(R.Nome) RACA,
 MAX(CA.NOME) CATEGORIAATUAL,
 COUNT(*) QTD_CAB,
 AVG(DATEDIFF(DAY FROM A.data_proc TO coalesce(A.data_saida,current_date))+1)DIAS_MEDIO,
 AVG(PESO_ENTRADA) PESO_ENT,
 AVG(PESO_ENTRADA/30)ARR_ENTRADA,
 AVG(PESO_ESTIMADO)PESO_ATUAL,
 AVG(PESO_ESTIMADO/30)ARR_ATUAL,
 CAST(SUM(A.consumo_acu)AS DECIMAL(15,2))CONSUMO_ACUMULADO,
 CAST(SUM(A.valor_custo_alimentar)AS DECIMAL(15,2))CUSTO_ALIMENTAR,
 CAST(SUM(A.valor_custo_fixo_acu)AS DECIMAL(15,2))CUSTOFIXOACUMULADO,
 CAST(SUM((VALOR_CUSTO_ALIMENTAR+VALOR_CUSTO_FIXO_ACU+VALOR_COMPRA))AS DECIMAL(15,2)) CUSTOTOTALMAISCOMPRA,
 CAST(SUM((VALOR_CUSTO_ALIMENTAR+VALOR_CUSTO_FIXO_ACU))AS DECIMAL(15,2))CUSTOTOTAL,
 AVG(IMS_PV)IMS_PV,
 A.ID_PROPRIEDADE
FROM ANIMAL A 
JOIN CURRAIS C ON A.ID_LOCAL=C.ID
JOIN RACA R ON R.id=A.id_raca
JOIN categorias CA ON CA.ID=coalesce(A.id_categoria,A.id_categoria)
WHERE A.STATUS=1
GROUP BY C.codigo,A.ID_PROPRIEDADE)Y
;

/* Create Views... */
/* Create view: VIEW_RESUMO_ATIVOS_GERAL_SEXO */
CREATE VIEW VIEW_RESUMO_ATIVOS_GERAL_SEXO(
PASTO,
SEXO,
QTD_CAB,
DIAS_MEDIO,
PESO_ENT,
ARR_ENTRADA,
PESO_ATUAL,
ARR_ATUAL,
CONSUMO_ACUMULADO,
CUSTO_ALIMENTAR,
CUSTOFIXOACUMULADO,
CUSTOTOTALMAISCOMPRA,
CUSTOTOTAL,
IMS_PV,
ID_PROPRIEDADE,
CUSTO_ARR_PROD,
DATA_ENTRADA_MEDIA,
ARR_PRODUZIDA,
CUSTO_ALIMENTAR_CAB,
CUSTO_FIXO_CAB_DIA,
GTP,
GMD,
CONSUMO_CAB_DIA)
 AS 
SELECT
 Y.*,
 CAST(CASE
 WHEN (ARR_ATUAL-ARR_ENTRADA)>0 THEN
   CUSTOTOTAL/((ARR_ATUAL-ARR_ENTRADA)*QTD_CAB)
  ELSE
   '0'
 END AS DECIMAL(15,2))  CUSTO_ARR_PROD,
 CURRENT_DATE-DIAS_MEDIO DATA_ENTRADA_MEDIA,
 CAST((ARR_ATUAL-ARR_ENTRADA) AS DECIMAL(15,2))ARR_PRODUZIDA,
 CAST((CUSTO_ALIMENTAR/QTD_CAB) AS DECIMAL(15,2))CUSTO_ALIMENTAR_CAB,
 CAST((CUSTOFIXOACUMULADO/QTD_CAB) AS DECIMAL(15,2)) CUSTO_FIXO_CAB_DIA,
 (PESO_ATUAL-PESO_ENT) GTP,
 ((PESO_ATUAL-PESO_ENT)/DIAS_MEDIO)GMD,
 (CONSUMO_ACUMULADO/QTD_CAB) CONSUMO_CAB_DIA
FROM
(SELECT
 C.codigo PASTO,
 CA.SEXO,
 COUNT(*) QTD_CAB,
 AVG(DATEDIFF(DAY FROM A.data_proc TO coalesce(A.data_saida,current_date))+1)DIAS_MEDIO,
 AVG(PESO_ENTRADA) PESO_ENT,
 AVG(PESO_ENTRADA/30)ARR_ENTRADA,
 AVG(PESO_ESTIMADO)PESO_ATUAL,
 AVG(PESO_ESTIMADO/30)ARR_ATUAL,
 SUM(A.consumo_acu)CONSUMO_ACUMULADO,
 SUM(COALESCE(A.valor_custo_alimentar,0))CUSTO_ALIMENTAR,
 SUM(COALESCE(A.valor_custo_fixo_acu,0))CUSTOFIXOACUMULADO,
 SUM(COALESCE((VALOR_CUSTO_ALIMENTAR+VALOR_CUSTO_FIXO_ACU+VALOR_COMPRA),0)) CUSTOTOTALMAISCOMPRA,
 SUM(COALESCE((VALOR_CUSTO_ALIMENTAR+VALOR_CUSTO_FIXO_ACU),0))CUSTOTOTAL,
 AVG(IMS_PV)IMS_PV,
 A.ID_PROPRIEDADE
FROM ANIMAL A 
JOIN CURRAIS C ON A.ID_LOCAL=C.ID
JOIN RACA R ON R.id=A.id_raca
JOIN categorias CA ON CA.ID=coalesce(A.id_categoria,A.id_categoria)
WHERE A.STATUS=1
GROUP BY C.codigo,CA.SEXO,A.ID_PROPRIEDADE)Y
;


/* Create generator... */
CREATE GENERATOR GEN_AUX_MOTIVO_APLICACAO_ID;

CREATE GENERATOR GEN_COMPRADOR_ID;

CREATE GENERATOR GEN_KEYFIELD_ID;

CREATE GENERATOR GEN_VERSION_ID;


/* Create Primary Key... */
ALTER TABLE AUX_MOTIVO_APLICACAO ADD CONSTRAINT PK_AUX_MOTIVO_APLICACAO PRIMARY KEY (ID);

ALTER TABLE COMPRADOR ADD CONSTRAINT PK_COMPRADOR PRIMARY KEY (ID);

ALTER TABLE KEYFIELD ADD CONSTRAINT PK_KEYFIELD PRIMARY KEY (ID);

ALTER TABLE VERSION ADD CONSTRAINT PK_VERSION PRIMARY KEY (ID);

/* Alter Procedure... */
/* Alter (PROJECAO) */
SET TERM ^ ;

ALTER PROCEDURE PROJECAO(ID_PLAN INTEGER)
 RETURNS(DIA VARCHAR(10),
GTP DECIMAL(18,2),
CONSUMO DECIMAL(18,2))
 AS
DECLARE VARIABLE vConsumoIni decimal(18,2);
DECLARE VARIABLE I INTEGER;
DECLARE VARIABLE vGTPIni decimal(18,2);
BEGIN
  I=1;
  GTP=0;
  CONSUMO=0;
  SELECT GMD,(CONSUMO_ESTIMADO/1000) FROM PLAN_NUTRI A
  WHERE id=:ID_PLAN
  INTO:vGTPIni,vConsumoIni;
  while(I<=30) DO 
  BEGIN
   DIA='Dia:'||I;
   GTP=:GTP+:vGTPIni;
   CONSUMO=(:CONSUMO+:vConsumoIni); 
   SUSPEND;
   I=I+1;
  END
END
^

/* Alter (SELECT_PESO_CONSUMO_PROJ) */
ALTER PROCEDURE SELECT_PESO_CONSUMO_PROJ(DATA_BASE DATE,
ID_PASTO INTEGER,
ID_CATEGORIA INTEGER,
ID_RACA INTEGER)
 RETURNS(PESO_PROJ DECIMAL(18,2),
CONSUMO_PROJ DECIMAL(18,2),
CONSUMO_INPV_PROJ DECIMAL(18,2))
 AS
declare variable VID_CAT integer;
declare variable I integer;
declare variable VID_RACA integer;
declare variable VDATAENT date;
declare variable VDATANASCIMENTO date;
declare variable VFAIXAATUAL varchar(20);
declare variable VDIAS integer;
declare variable VIDADEATUAL integer;
declare variable VDATACONTROLE date;
declare variable VPESOCONTROLE decimal(15,2);
declare variable VGMD decimal(15,2);
declare variable ID_CAT_ENT integer;
declare variable CUSTOFIXO decimal(15,2);
declare variable VSEXO char(1);
declare variable VPESOENT decimal(15,2);
declare variable MES_ATUAL integer;
declare variable ID_FASE_ATUAL integer;
begin
  SELECT
     AVG(A.peso_entrada),
     MIN(A.data_nascimento),
     MIN(a.data_proc),
     AVG(trunc(coalesce(A.data_saida,:DATA_BASE)-cast(a.data_proc AS date)))DIAS,
     AVG(DATEDIFF(MONTH FROM DATA_NASCIMENTO TO :DATA_BASE)) IDADE,
     D.SEXO
  FROM animal A
  join currais c on a.id_local=c.id
  join categorias d on d.id=a.id_categoria
  WHERE A.STATUS=1 AND A.ID_LOCAL=:ID_PASTO
  AND A.ID_RACA=:ID_RACA AND ID_CATEGORIA=:ID_CATEGORIA
  GROUP BY id_raca,id_categoria,D.SEXO
  INTO:vpesoent,:vdatanascimento,:vdataent,:vdias,:VIDADEATUAL,:VSEXO;  
 
  I =1;
  vdatacontrole = vdataent;
  vPesoControle = vpesoent;
 
  while(I<=vdias)do
  BEGIN
  MES_ATUAL   = EXTRACT(month FROM vdatacontrole);
    
    SELECT ID_FASE_ATUAL FROM RETORNA_FASE_ATUAL(:MES_ATUAL)
    INTO:id_fase_atual;  
    
    if (id_fase_atual IS NULL) then
    begin
     SELECT ID FROM aux_fases A
     WHERE (:MES_ATUAL=a.mes_fim)
     INTO:id_fase_atual;
    end
    
    if (id_fase_atual IS NOT NULL) then
    BEGIN
     vdatacontrole =vdatacontrole+1;
    
     select first 1 coalesce(pn.GMD,0),coalesce(PN.CONSUMO_ESTIMADO,0), 
     coalesce(PN.INGESTAO_PV,0) from plan_nutri pn
     where pn.id_categoria=:ID_CATEGORIA and
     pn.id_raca=:ID_RACA
     AND PN.id_fase= :id_fase_atual
     INTO:VGMD,CONSUMO_PROJ,:CONSUMO_INPV_PROJ;
    end
    ELSE
     VGMD=0;
     I=I+1;
    vPesoControle = vPesoControle+VGMD; 
   
  END
  if (vPesoControle is null) then vPesoControle=vpesoent;
  PESO_PROJ =vPesoControle; 
 SUSPEND;
END
^

/* Alter (SELECT_PREVISAO_ESTOQUE) */
ALTER PROCEDURE SELECT_PREVISAO_ESTOQUE RETURNS(MINERAL VARCHAR(100),
TOTALENTRADA DECIMAL(15,2),
TOTALSAIDA DECIMAL(15,2),
SALDOATUAL DECIMAL(15,2),
ESTOQUEMINIMO DECIMAL(15,2),
QTDCABATUAL DECIMAL(15,2),
CONSUMOMEDIOCAB DECIMAL(15,2),
CONSUMOMEDIODIA DECIMAL(15,2),
PREVISAOEMDIAS DECIMAL(15,2),
ESTOQUEMINIMODIAS INTEGER,
ALERTA INTEGER)
 AS
declare variable VIdMineral integer;
 declare variable VConsumoMedDia decimal(15,3);
begin
  FOR SELECT
   SM.ID,
   SM.nome,
   SUM(ES.peso_fazenda)
  FROM estoque_mineral_entrada ES
  join suplemento_mineral SM ON SM.id=ES.id_mineral
  group BY SM.ID,SM.nome
  INTO:VIdMineral,:Mineral,:TotalEntrada
  DO
  BEGIN
    SELECT COALESCE(ESTOQUE_MINIMO,0),COALESCE(ESTOQUE_MINIMO_DIAS,0) FROM SUPLEMENTO_MINERAL A
    WHERE ID=:VIdMineral
  INTO:EstoqueMinimo,:EstoqueMinimoDIas;

  SELECT COALESCE(SUM(A.REALIZADO_COCHO_KG),0) FROM FORNECIMENTO A
  WHERE A.ID_PRODUTO=:VIdMineral  
  INTO:TotalSaida;
  SaldoAtual = (:TotalEntrada-:TotalSaida);   
   
    select  COALESCE(sum(f.realizado_cocho_kg)/sum(f.qtd_animais),0)
    from fornecimento f
    WHERE ID_PRODUTO=:VIdMineral
    INTO:ConsumoMedioCab; 
   
    SELECT COUNT(*) FROM ANIMAL WHERE STATUS=1
    INTO:QtdCabAtual;
   
    ConsumoMedioDia = QtdCabAtual * ConsumoMedioCab;
    IF (ConsumoMedioDia>0)then
     PrevisaoEmDias  = SaldoAtual/ConsumoMedioDia;
    ELSE  
     PrevisaoEmDias  =0;
    
    Alerta = PrevisaoEmDias-EstoqueMinimoDIas;
    suspend;
  END 
 END
^

/* Alter (SP_DIA_SEMANA) */
ALTER PROCEDURE SP_DIA_SEMANA(P_DATA DATE)
 RETURNS(S_DIA VARCHAR(15))
 AS
declare variable V_DIA integer;
BEGIN
  V_DIA = EXTRACT(WEEKDAY FROM :P_DATA);
  S_DIA =
   CASE :V_DIA
     WHEN 0 THEN 'DOMINGO'
     WHEN 1 THEN 'SEGUNDA-FEIRA'
     WHEN 2 THEN 'TERÃ‡A-FEIRA'
     WHEN 3 THEN 'QUARTA-FEIRA'
     WHEN 4 THEN 'QUINTA-FEIRA'
     WHEN 5 THEN 'SEXTA-FEIRA'
     WHEN 6 THEN 'SÃBADO'
   END;
  SUSPEND;
END
^

/* Creating trigger... */
CREATE TRIGGER AUX_MOTIVO_APLICACAO_BI FOR AUX_MOTIVO_APLICACAO
ACTIVE BEFORE INSERT POSITION 0 
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_aux_motivo_aplicacao_id,1);
end
^

CREATE TRIGGER COMPRADOR_BI FOR COMPRADOR
ACTIVE BEFORE INSERT POSITION 0 
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_comprador_id,1);
end
^

CREATE TRIGGER KEYFIELD_BI FOR KEYFIELD
ACTIVE BEFORE INSERT POSITION 0 
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_keyfield_id,1);
end
^

CREATE TRIGGER VERSION_BI FOR VERSION
ACTIVE BEFORE INSERT POSITION 0 
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_version_id,1);
end
^

/* Create Views... */

/* Create(Add) privilege */
SET TERM ; ^

ALTER TABLE ANIMAL_SANIDADE ADD ID_MOTIVO_APLICACAO INTEGER;

ALTER TABLE AUX_MOTIVO_MOVIMENTACAO
ADD STATUS INTEGER
DEFAULT 1 
NOT NULL;

CREATE TABLE PLAN_USO_MINERAL(ID INTEGER NOT NULL,
ID_COCHO INTEGER NOT NULL,
ID_MINERAL INTEGER,
DATA DATE NOT NULL,
ID_USUARIO INTEGER NOT NULL,
DATA_REG TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
STATUS INTEGER DEFAULT 1 NOT NULL);



/* Create generator... */
CREATE GENERATOR GEN_PLAN_USO_MINERAL_ID;


/* Create Primary Key... */
ALTER TABLE PLAN_USO_MINERAL ADD CONSTRAINT PK_PLAN_USO_MINERAL PRIMARY KEY (ID);

/* Create Foreign Key... */
RECONNECT;

ALTER TABLE PLAN_USO_MINERAL ADD CONSTRAINT FK_PLAN_USO_MINERAL_1 FOREIGN KEY (ID_COCHO) REFERENCES COCHO (ID) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PLAN_USO_MINERAL ADD CONSTRAINT FK_PLAN_USO_MINERAL_2 FOREIGN KEY (ID_MINERAL) REFERENCES SUPLEMENTO_MINERAL (ID) ON UPDATE CASCADE ON DELETE CASCADE;

/* Alter Procedure... */
/* Alter (SP_DIA_SEMANA) */
SET TERM ^ ;

ALTER PROCEDURE SP_DIA_SEMANA(P_DATA DATE)
 RETURNS(S_DIA VARCHAR(15))
 AS
declare variable V_DIA integer;
BEGIN
  V_DIA = EXTRACT(WEEKDAY FROM :P_DATA);
  S_DIA =
   CASE :V_DIA
     WHEN 0 THEN 'DOMINGO'
     WHEN 1 THEN 'SEGUNDA'
     WHEN 2 THEN 'TERCA'
     WHEN 3 THEN 'QUARTA'
     WHEN 4 THEN 'QUINTA'
     WHEN 5 THEN 'SEXTA'
     WHEN 6 THEN 'SABADO'
   END;
  SUSPEND;
END
^

/* Creating trigger... */
CREATE TRIGGER PLAN_USO_MINERAL_BI FOR PLAN_USO_MINERAL
ACTIVE BEFORE INSERT POSITION 0 
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_plan_uso_mineral_id,1);
end
^
CREATE trigger cocho_ai_plan_mineral for cocho
active after insert position 0
AS
begin
  insert into plan_uso_mineral (id_cocho,id_mineral,data,id_usuario)
  select
   id,id_mineral,cast(datareg as date),id_usuario
  from cocho
  where id=new.id;
end
^
SET TERM ; ^

ALTER TABLE SUPLEMENTO_MINERAL
ADD INGESTAO_PERCENT_PV DECIMAL(15,3) NOT NULL;

ALTER TABLE PREVISAO_FORN_DIA DROP CONSUMO_TOTAL;
ALTER TABLE PREVISAO_FORN_DIA ADD CONSUMO_TOTAL NUMERIC(15,3);

CREATE TABLE HIST_ANIMAIS_PESO_QTD(ID INTEGER NOT NULL,
ID_CURRAL_PASTO INTEGER NOT NULL,
DATA DATE NOT NULL,
QTD_CAB INTEGER NOT NULL,
PESO_PROJ DECIMAL(15,3) NOT NULL,
DIAS INTEGER NOT NULL);
ALTER TABLE HIST_ANIMAIS_PESO_QTD ADD CONSTRAINT PK_HIST_ANIMAIS_PESO_QTD PRIMARY KEY (ID);
CREATE GENERATOR GEN_HIST_ANIMAIS_PESO_QTD_ID;

SET TERM ^ ;
CREATE TRIGGER HIST_ANIMAIS_PESO_QTD_BI FOR HIST_ANIMAIS_PESO_QTD
ACTIVE BEFORE INSERT POSITION 0 
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_hist_animais_peso_qtd_id,1);
end
^
SET TERM ; ^

CREATE TABLE HIST_ANIMAL_LOCAL_DIA(ID INTEGER NOT NULL,
ID_ANIMAL INTEGER NOT NULL,
ID_LOCAL INTEGER NOT NULL,
DATA DATE DEFAULT CURRENT_DATE NOT NULL,
HORA_REG TIME DEFAULT CURRENT_TIME NOT NULL);

CREATE GENERATOR GEN_HIST_ANIMAL_LOCAL_DIA_ID;

ALTER TABLE HIST_ANIMAL_LOCAL_DIA ADD CONSTRAINT PK_HIST_ANIMAL_LOCAL_DIA PRIMARY KEY (ID);

SET TERM ^ ;

CREATE TRIGGER HIST_ANIMAL_LOCAL_DIA_BI FOR HIST_ANIMAL_LOCAL_DIA
ACTIVE BEFORE INSERT POSITION 0 
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_hist_animal_local_dia_id,1);
end
^
SET TERM ; ^

CREATE OR ALTER VIEW VIEW_RESUMO_ATIVOS_GERAL (PASTO, RACA, CATEGORIAATUAL, QTD_CAB, DIAS_MEDIO, PESO_ENT, ARR_ENTRADA, PESO_ATUAL, ARR_ATUAL, CONSUMO_ACUMULADO, CUSTO_ALIMENTAR, CUSTOFIXOACUMULADO, CUSTOTOTALMAISCOMPRA, CUSTOTOTAL, IMS_PV, ID_PROPRIEDADE, CUSTO_ARR_PROD, DATA_ENTRADA_MEDIA, ARR_PRODUZIDA, CUSTO_ALIMENTAR_CAB, CUSTO_FIXO_CAB_DIA, GTP, GMD, CONSUMO_CAB_DIA)
AS
SELECT
 Y.*,
 CAST(CASE
 WHEN (ARR_ATUAL-ARR_ENTRADA)>0 THEN
   CUSTOTOTAL/((ARR_ATUAL-ARR_ENTRADA)*QTD_CAB)
  ELSE
   '0'
 END AS DECIMAL(15,2))  CUSTO_ARR_PROD,
 CURRENT_DATE-DIAS_MEDIO DATA_ENTRADA_MEDIA,
 CAST((ARR_ATUAL-ARR_ENTRADA)AS DECIMAL(15,2))ARR_PRODUZIDA,
 CAST((CUSTO_ALIMENTAR/QTD_CAB)AS DECIMAL(15,2))CUSTO_ALIMENTAR_CAB,
 CAST((CUSTOFIXOACUMULADO/QTD_CAB)AS DECIMAL(15,2))CUSTO_FIXO_CAB_DIA,
 (PESO_ATUAL-PESO_ENT) GTP,
 ((PESO_ATUAL-PESO_ENT)/(DIAS_MEDIO))GMD,
 (CONSUMO_ACUMULADO/QTD_CAB) CONSUMO_CAB_DIA
FROM
(SELECT
 C.codigo PASTO,
 MAX(R.Nome) RACA,
 MAX(CA.NOME) CATEGORIAATUAL,
 COUNT(*) QTD_CAB,
 AVG(DATEDIFF(DAY FROM A.data_proc TO coalesce(A.data_saida,current_date)))DIAS_MEDIO,
 AVG(PESO_ENTRADA) PESO_ENT,
 AVG(PESO_ENTRADA/30)ARR_ENTRADA,
 AVG(PESO_ESTIMADO)PESO_ATUAL,
 AVG(PESO_ESTIMADO/30)ARR_ATUAL,
 CAST(SUM(A.consumo_acu)AS DECIMAL(15,2))CONSUMO_ACUMULADO,
 CAST(SUM(A.valor_custo_alimentar)AS DECIMAL(15,2))CUSTO_ALIMENTAR,
 CAST(SUM(A.valor_custo_fixo_acu)AS DECIMAL(15,2))CUSTOFIXOACUMULADO,
 CAST(SUM((VALOR_CUSTO_ALIMENTAR+VALOR_CUSTO_FIXO_ACU+VALOR_COMPRA))AS DECIMAL(15,2)) CUSTOTOTALMAISCOMPRA,
 CAST(SUM((VALOR_CUSTO_ALIMENTAR+VALOR_CUSTO_FIXO_ACU))AS DECIMAL(15,2))CUSTOTOTAL,
 AVG(IMS_PV)IMS_PV,
 A.ID_PROPRIEDADE
FROM ANIMAL A 
JOIN CURRAIS C ON A.ID_LOCAL=C.ID
JOIN RACA R ON R.id=A.id_raca
JOIN categorias CA ON CA.ID=coalesce(A.id_categoria,A.id_categoria)
WHERE A.STATUS=1
GROUP BY C.codigo,A.ID_PROPRIEDADE)Y
;
drop procedure INSERE_LOG_ANIMAL;
drop table LOG_ANIMAL;

CREATE TABLE LOG_ANIMAL (
     ID                          INTEGER ,
     ID_LOCAL                     INTEGER ,
     ID_CATEGORIA                 INTEGER ,
     ID_RACA                      INTEGER ,
     IDENTIFICACAO_1              VARCHAR(25),
     IDENTIFICACAO_2              VARCHAR(25),
     DATA_PROC                    TIMESTAMP,
     GTA_ID                       INTEGER,
     IDADE_MESES                  INTEGER,
     DATA_NASCIMENTO              TIMESTAMP,
     PESO_ENTRADA                 DECIMAL(15,2),
     ULTIMO_PESO                  DECIMAL(15,2),
     DATA_ULTIMO_PESO             DATE,
     STATUS                       INTEGER,
     DATAREG                      TIMESTAMP,
     ID_USUARIO                   INTEGER,
     DATA_SAIDA                   DATE,
     PESO_SAIDA                   DECIMAL(15,2),
     ID_PROPRIEDADE               INTEGER,
     ID_PRODUTOR                  INTEGER,
     ULTIMA_ALTERACAO             TIMESTAMP,
     ULTIMO_USUARIO               INTEGER,
     ID_LOTESAIDA                 INTEGER,
     ID_VEICULO_SAIDA             INTEGER,
     ORIGEM_DADOS                 VARCHAR(15),
     TIPO_SAIDA                   VARCHAR(15),
     ID_MOTIVO_MORTE              INTEGER,
     ID_LOTE                      INTEGER,
     VALOR_COMPRA                 DECIMAL(15,2),
     VALOR_VENDA                  DECIMAL(18,2),
     ID_PRODUTOR_ORIGEM           INTEGER,
     FLAG_SYNC                    INTEGER,
     DATA_SYNC                    TIMESTAMP,
     DATA_LIBERACAO               DATE,
     ID_ULTIMO_USUARIO_ALTERACAO  INTEGER,
     DATA_ULTIMA_ALTERACAO        TIMESTAMP,
     ID_CONTRATO_COMPRA           INTEGER,
     ID_PRODUTOR_DESTINO_SAIDA    INTEGER,
     IDADE_MORTE                  INTEGER,
     ID_GTA_SAIDA                 INTEGER,
     OBSERVACAO                   VARCHAR(100),
     TIPO_ENTRADA                 INTEGER,
     PESO_ESTIMADO                DECIMAL(15,2),
     DATA_PESO_ESTIMADO           DATE,
     VALOR_CUSTO_ALIMENTAR        DECIMAL(15,2),
     VALOR_CUSTO_FIXO_ACU         DECIMAL(15,2),
     ID_CATEGORIA_ATUAL           INTEGER,
     CONSUMO_ACU                  DECIMAL(15,2),
     IMS_PV                       DECIMAL(15,2),
     ID_COMUNICADO_REIDENT        INTEGER,
     ID_COMUNICADO_MORTE          INTEGER,
     OBS_MORTE                    VARCHAR(100),
     TIPO_MORTE                   INTEGER,
     DATA_REPROCESSAMENTO         TIMESTAMP,
     ID_COM_NASCIMENTO            INTEGER,
     IDENTIFICACAO_MAE            VARCHAR(20),
     CARIMBO_NASCIMENTO           VARCHAR(20),
     OUTRO_ERAS                   INTEGER,
	 ID_USUARIO_LOG               INTEGER,
	 DATAREG_LOG TIMESTAMP DEFAULT CURRENT_TIMESTAMP 
);

CREATE PROCEDURE INSERE_LOG_ANIMAL (IDANIMAL INTEGER, ID_USUARIO INTEGER)
AS
declare variable IDUSER varchar(10);
BEGIN
IDUSER = ID_USUARIO;
 INSERT INTO LOG_ANIMAL
 SELECT a.*,:IDUSER  ID_USUARIO_LOG,NULL FROM ANIMAL A
 WHERE ID= :IDANIMAL;

 UPDATE ANIMAL SET id_ultimo_usuario_alteracao=:IDUSER,data_ultima_alteracao=current_timestamp
 WHERE ID= :IDANIMAL;
END;

ALTER TABLE PREVISAO_FORN_DIA ADD ID_LOCAL INTEGER;

DROP VIEW VIEW_RESUMO_ATIVOS_GERAL;
CREATE OR ALTER VIEW VIEW_RESUMO_ATIVOS_GERAL (PASTO, RACA, CATEGORIAATUAL, QTD_CAB, DIAS_MEDIO, PESO_ENT, ARR_ENTRADA, PESO_ATUAL, ARR_ATUAL, CONSUMO_ACUMULADO, CUSTO_ALIMENTAR, CUSTOFIXOACUMULADO, CUSTOTOTALMAISCOMPRA, CUSTOTOTAL,ID_PROPRIEDADE, CUSTO_ARR_PROD, DATA_ENTRADA_MEDIA, ARR_PRODUZIDA, CUSTO_ALIMENTAR_CAB, CUSTO_FIXO_CAB_DIA, GTP, GMD, CONSUMO_CAB_DIA,IMS_PV)
AS
SELECT 
 W.*, 
((CONSUMO_CAB_DIA*100)/PESO_ATUAL) IMS_PV
FROM 
(SELECT
 Y.*,
 CAST(CASE
 WHEN (ARR_ATUAL-ARR_ENTRADA)>0 THEN
   CUSTOTOTAL/((ARR_ATUAL-ARR_ENTRADA)*QTD_CAB)
  ELSE
   '0'
 END AS DECIMAL(15,2))  CUSTO_ARR_PROD,
 CURRENT_DATE-DIAS_MEDIO DATA_ENTRADA_MEDIA,
 CAST((ARR_ATUAL-ARR_ENTRADA)AS DECIMAL(15,2))ARR_PRODUZIDA,
 CAST((CUSTO_ALIMENTAR/QTD_CAB)AS DECIMAL(15,2))CUSTO_ALIMENTAR_CAB,
 CAST((CUSTOFIXOACUMULADO/QTD_CAB)AS DECIMAL(15,2))CUSTO_FIXO_CAB_DIA,
 (PESO_ATUAL-PESO_ENT) GTP,
 ((PESO_ATUAL-PESO_ENT)/(DIAS_MEDIO))GMD,
 (CONSUMO_ACUMULADO/QTD_CAB)/(DIAS_MEDIO) CONSUMO_CAB_DIA
FROM
(SELECT
 C.codigo PASTO,
 MAX(R.Nome) RACA,
 MAX(CA.NOME) CATEGORIAATUAL,
 COUNT(*) QTD_CAB,
 AVG(DATEDIFF(DAY FROM A.data_proc TO coalesce(A.data_saida,current_date)))DIAS_MEDIO,
 AVG(PESO_ENTRADA) PESO_ENT,
 AVG(PESO_ENTRADA/30)ARR_ENTRADA,
 AVG(PESO_ESTIMADO)PESO_ATUAL,
 AVG(PESO_ESTIMADO/30)ARR_ATUAL,
 CAST(SUM(A.consumo_acu)AS DECIMAL(15,2))CONSUMO_ACUMULADO,
 CAST(SUM(A.valor_custo_alimentar)AS DECIMAL(15,2))CUSTO_ALIMENTAR,
 CAST(SUM(A.valor_custo_fixo_acu)AS DECIMAL(15,2))CUSTOFIXOACUMULADO,
 CAST(SUM((VALOR_CUSTO_ALIMENTAR+VALOR_CUSTO_FIXO_ACU+VALOR_COMPRA))AS DECIMAL(15,2)) CUSTOTOTALMAISCOMPRA,
 CAST(SUM((VALOR_CUSTO_ALIMENTAR+VALOR_CUSTO_FIXO_ACU))AS DECIMAL(15,2))CUSTOTOTAL,
 A.ID_PROPRIEDADE
FROM ANIMAL A 
JOIN CURRAIS C ON A.ID_LOCAL=C.ID
JOIN RACA R ON R.id=A.id_raca
JOIN categorias CA ON CA.ID=coalesce(A.id_categoria,A.id_categoria)
WHERE A.STATUS=1
GROUP BY C.codigo,A.ID_PROPRIEDADE)Y)W;

DROP VIEW VIEW_RESUMO_ATIVOS_GERAL_SEXO;

CREATE OR ALTER VIEW VIEW_RESUMO_ATIVOS_GERAL_SEXO (PASTO, SEXO, QTD_CAB, DIAS_MEDIO, PESO_ENT, ARR_ENTRADA, PESO_ATUAL, ARR_ATUAL, CONSUMO_ACUMULADO, CUSTO_ALIMENTAR, CUSTOFIXOACUMULADO, CUSTOTOTALMAISCOMPRA, CUSTOTOTAL,ID_PROPRIEDADE, CUSTO_ARR_PROD, DATA_ENTRADA_MEDIA, ARR_PRODUZIDA, CUSTO_ALIMENTAR_CAB, CUSTO_FIXO_CAB_DIA, GTP, GMD, CONSUMO_CAB_DIA,IMS_PV)
AS
SELECT 
 w.*,
 (CONSUMO_CAB_DIA*100)/PESO_ATUAL IMS_PV
FROM 
(SELECT
 Y.*,
 CAST(CASE
 WHEN (ARR_ATUAL-ARR_ENTRADA)>0 THEN
   CUSTOTOTAL/((ARR_ATUAL-ARR_ENTRADA)*QTD_CAB)
  ELSE
   '0'
 END AS DECIMAL(15,2))  CUSTO_ARR_PROD,
 CURRENT_DATE-DIAS_MEDIO DATA_ENTRADA_MEDIA,
 CAST((ARR_ATUAL-ARR_ENTRADA) AS DECIMAL(15,2))ARR_PRODUZIDA,
 CAST((CUSTO_ALIMENTAR/QTD_CAB) AS DECIMAL(15,2))CUSTO_ALIMENTAR_CAB,
 CAST((CUSTOFIXOACUMULADO/QTD_CAB) AS DECIMAL(15,2)) CUSTO_FIXO_CAB_DIA,
 (PESO_ATUAL-PESO_ENT) GTP,
 ((PESO_ATUAL-PESO_ENT)/DIAS_MEDIO)GMD,
 (CONSUMO_ACUMULADO/QTD_CAB)/DIAS_MEDIO CONSUMO_CAB_DIA
FROM
(SELECT
 C.codigo PASTO,
 CA.SEXO,
 COUNT(*) QTD_CAB,
 AVG(DATEDIFF(DAY FROM A.data_proc TO coalesce(A.data_saida,current_date))+1)DIAS_MEDIO,
 AVG(PESO_ENTRADA) PESO_ENT,
 AVG(PESO_ENTRADA/30)ARR_ENTRADA,
 AVG(PESO_ESTIMADO)PESO_ATUAL,
 AVG(PESO_ESTIMADO/30)ARR_ATUAL,
 SUM(A.consumo_acu)CONSUMO_ACUMULADO,
 SUM(COALESCE(A.valor_custo_alimentar,0))CUSTO_ALIMENTAR,
 SUM(COALESCE(A.valor_custo_fixo_acu,0))CUSTOFIXOACUMULADO,
 SUM(COALESCE((VALOR_CUSTO_ALIMENTAR+VALOR_CUSTO_FIXO_ACU+VALOR_COMPRA),0)) CUSTOTOTALMAISCOMPRA,
 SUM(COALESCE((VALOR_CUSTO_ALIMENTAR+VALOR_CUSTO_FIXO_ACU),0))CUSTOTOTAL,
 A.ID_PROPRIEDADE
FROM ANIMAL A 
JOIN CURRAIS C ON A.ID_LOCAL=C.ID
JOIN RACA R ON R.id=A.id_raca
JOIN categorias CA ON CA.ID=coalesce(A.id_categoria,A.id_categoria)
WHERE A.STATUS=1
GROUP BY C.codigo,CA.SEXO,A.ID_PROPRIEDADE)Y)w;


